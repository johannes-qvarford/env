#!/usr/bin/env python3

import subprocess
import argparse
import sys

keeppatterns = """.vimrc
.zshrc
.gitconfig
.gitignore
.mintty
.config""".split("\n")

prunedirs = """AppData
.git
.hg""".split("\n")

ignorepatterns = """AppData
.git$
.hg$
.*\.so$
.*\.dll$
.*\.pyc$
.*\.sw.$
.*\.DS_Store
.*~$
\.[^.]+$""".split("\n")

def insert_before_elements(l, e):
    return [[e, elem] for elem in l][:-1]

def flatten(v):
    if isinstance(v, (list)):
        if len(v) == 0:
            return v
        else:
            return flatten(v[0]) + flatten(v[1:])
    else:
        return [v]

prune_part = ["(", "-false"] + insert_before_elements(prunedirs, ["-o", "-name"]) + [")", "-prune"]

keep_files_part = ["(", "-false"] + insert_before_elements(keepfiles, ["-o", "-name"]) + [")", "-print"]

grep_command = ["grep", "-E", insert_before_elements(ignorepatterns, "-e")]

find_dirs_arguments = ["find", ".", "(", "-type", "d", ")", "-print", prune_part]
find_files_arguments = ["find", ".", "(", "-type", "f", ")", "-print", prune_part]

find_default_arguments = find_files_arguments

fzf_default_arguments = ["fzf"]

def default_command():
    pipe = subprocess.Popen((flatten(find_default_arguments)), stdout=subprocess.PIPE)
    return subprocess.call(flatten(grep_command), stdin=pipe.stdout)

def files():
    grep_pipe = subprocess.Popen(flatten(find_files_arguments), stdout=subprocess.PIPE)
    #fzf_pipe = subprocess.Popen(flatten(grep_command), stdout=subprocess.PIPE, stdin=grep_pipe.stdout)
    print(grep_pipe.stdout.read().decode())
#    return subprocess.Popen(flatten(fzf_default_arguments), stdin=fzf_pipe.stdout)

def dirs():
    grep_pipe = subprocess.Popen(flatten(find_files_arguments), stdout=subprocess.PIPE)
    fzf_pipe = subprocess.Popen(flatten(grep_command), stdout=subprocess.PIPE, stdin=grep_pipe.stdout)
#    return subprocess.Popen(flatten(fzf_default_arguments, stdin=fzf_pipe.stdout))

strings_to_commands = {
        "default_command" : default_command,
        "files" : files,
        "dirs" : files
        }

if __name__ == "__main__":
    parser = argparse.ArgumentParser("perform a fzf related command")
    parser.add_argument("command", choices=["default_command", "files", "dirs"])
    print(flatten(grep_command))
    result = parser.parse_args(sys.argv[1:])
    strings_to_commands[result.command]()
