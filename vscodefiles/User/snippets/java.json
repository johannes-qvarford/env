{
	// Place your snippets for Java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.

	"int": { "prefix": "int", "body": ["int"] },

	"Public getter": {
		"prefix": "get",
		"body": [
			"public $1 get$2()",
			"{",
			"\treturn ${3};",
			"}",
			"$0"
		],
		"description": "Public getter"
	},
	"Package getter": {
		"prefix": "paget",
		"body": [
			"$1 get$2()",
			"{",
			"\treturn ${3};",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Optional int getter": {
		"prefix": "oiget",
		"body": [
			"OptionalInt get$1()",
			"{",
			"\treturn $2 != null ? OptionalInt.of($2) : OptionalInt.empty();",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Optional getter": {
		"prefix": "oget",
		"body": [
			"public Optional<$1> get$2()",
			"{",
			"\treturn Optional.of($3);",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Package-local Optional getter": {
		"prefix": "paoget",
		"body": [
			"Optional<$1> get$2()",
			"{",
			"\treturn Optional.of($3);",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Builder setter": {
		"prefix": "bsetter",
		"body": [
			"public Builder set$2($3 $4)",
			"{",
			"\tthis.$4 = $4;",
			"\treturn this;",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Package-local Builder setter": {
		"prefix": "pabsetter",
		"body": [
			"$Builder set$2($3 $4)",
			"{",
			"\tthis.$4 = $4;",
			"\treturn this;",
			"}",
			"$0"
		],
		"description": "Package-local getter"
	},
	"Final field": {
		"prefix": "ffield",
		"body": [
			"private final ${1:String} ${2:name};"
		],
		"description": "Final field"
	},
	"field": {
		"prefix": "field",
		"body": [
			"private ${1:String} ${2:name};"
		],
		"description": "Final field"
	},
	"Public class": {
		"prefix": "class",
		"body": [
			"public class ${TM_FILENAME_BASE}",
			"{",
			"\t$0",
			"}"
		]
	},
	"Package-local class": {
		"prefix": "paclass",
		"body": [
			"class ${TM_FILENAME_BASE}",
			"{",
			"\t$0",
			"}"
		]
	},
	"Builder": {
		"prefix": "builder",
		"body": [
			"public static class Builder",
			"{",
			"\t$0",
			"\tpublic ${TM_FILENAME_BASE} build()",
			"\t{",
			"\t\t// @formatter:off",
			"\t\treturn new ${TM_FILENAME_BASE}(",
			"\t\t\t);",
			"\t\t// @formatter:on",
			"\t}",
			"}"
		]
	},
	"Package-local Builder": {
		"prefix": "pabuilder",
		"body": [
			"static class Builder",
			"{",
			"\t$0",
			"\t${TM_FILENAME_BASE} build()",
			"\t{",
			"\t\t// @formatter:off",
			"\t\treturn new ${TM_FILENAME_BASE}(",
			"\t\t\t);",
			"\t\t// @formatter:on",
			"\t}",
			"}"
		]
	},
	"Package-local builder method": {
		"prefix": "pambuilder",
		"body": [
			"static Builder builder()",
			"{",
			"\treturn new Builder();",
			"}"
		]
	},
	"Public builder method": {
		"prefix": "mbuilder",
		"body": [
			"public static Builder builder()",
			"{",
			"\treturn new Builder();",
			"}"
		]
	},
	"Assign field": {
		"prefix": "afield",
		"body": [
			"this.$1 = Objects.requireNonNull($1, \"$1\");"
		]
	},
	"Constructor": {
		"prefix": "constructor",
		"body": [
			"// @formatter:off",
			"public ${TM_FILENAME_BASE}(",
			"\t$1)",
			"// @formatter:on",
			"{",
			"\t$0",
			"}"
		]
	},
	"Package-local Constructor": {
		"prefix": "paconstructor",
		"body": [
			"// @formatter:off",
			"${TM_FILENAME_BASE}(",
			"\t$1)",
			"// @formatter:on",
			"{",
			"\t$0",
			"}"
		]
	},
	"Not null annotation": {
		"prefix": "nn",
		"body": [
			"@NotNull"
		]
	},

	"Formatter off": {
		"prefix": "ff",
		"body": [
			"// @formatter:off"
		]
	},

	"Formatter on": {
		"prefix": "fn",
		"body": [
			"// @formatter:on"
		]
	},

	"Documentation": {
		"prefix": "doc",
		"body": [
			"// @formatter:on",
			"/**",
			" * $0",
			" */",
			"// @formatter:off"
		]
	}
}